apiVersion: v1
kind: ConfigMap
metadata:
  name: rke2-install-script-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
data:
  install.sh: |
    #!/bin/bash
    set -e
    IS_FIRST_NODE=$1
    VIP="{{ .Values.kubeVip.vip }}"
    echo "Starting RKE2 installation at $(date)" > /tmp/rke2-install.log

    # Install prerequisites
    apt update -y && apt install -y curl >> /tmp/rke2-install.log 2>&1 || { echo "Failed to install curl"; exit 1; }

    # Install RKE2
    echo "Downloading RKE2..." >> /tmp/rke2-install.log
    curl -sfL https://get.rke2.io | INSTALL_RKE2_VERSION={{ .Values.rke2.version }} sh - >> /tmp/rke2-install.log 2>&1 || { echo "Failed to download/install RKE2"; exit 1; }
    mkdir -p /etc/rancher/rke2
    cp /etc/rancher/rke2-config/config.yaml /etc/rancher/rke2/config.yaml

    if [ "$IS_FIRST_NODE" -eq 1 ]; then
      # Start RKE2 on first node
      systemctl enable rke2-server.service
      systemctl start rke2-server.service
      # Wait for RKE2 to be ready
      sleep 60
      # Install Kube-VIP
      echo "Installing Kube-VIP..." >> /tmp/rke2-install.log
      curl -s https://kube-vip.io/manifests/rbac.yaml > /var/lib/rancher/rke2/server/manifests/kube-vip-rbac.yaml
      crictl pull docker.io/plndr/kube-vip:{{ .Values.kubeVip.version }} >> /tmp/rke2-install.log 2>&1
      ctr --namespace k8s.io run --rm --net-host docker.io/plndr/kube-vip:{{ .Values.kubeVip.version }} vip /kube-vip manifest daemonset \
        --arp \
        --interface {{ .Values.kubeVip.interface }} \
        --address {{ .Values.kubeVip.vip }} \
        --controlplane \
        --leaderElection \
        --taint \
        --services \
        --inCluster > /var/lib/rancher/rke2/server/manifests/kube-vip.yaml
      # Install Helm and Cert-Manager
      curl -#L https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      helm repo add jetstack https://charts.jetstack.io --force-update
      helm upgrade -i cert-manager jetstack/cert-manager -n cert-manager --create-namespace --set installCRDs=true
    else
      # Wait for Kube-VIP to be active on first node
      sleep 90
      # Join using VIP
      until curl -k -s https://$VIP:9345/ping; do
        echo "Waiting for VIP ($VIP) to be reachable..." >> /tmp/rke2-install.log
        sleep 5
      done
      TOKEN=$(curl -s -k https://$VIP:9345/v1-rke2/server-token)
      echo "token: $TOKEN" >> /etc/rancher/rke2/config.yaml
      echo "server: https://$VIP:9345" >> /etc/rancher/rke2/config.yaml
      systemctl enable rke2-server.service
      systemctl start rke2-server.service
    fi

    # Set up kubectl
    KUBECTL_PATH=$(find /var/lib/rancher/rke2/data/ -name kubectl | head -n 1)
    if [ -n "$KUBECTL_PATH" ]; then
      ln -sf "$KUBECTL_PATH" /usr/local/bin/kubectl
    fi
    echo "export KUBECONFIG=/etc/rancher/rke2/rke2.yaml" >> /home/ubuntu/.bashrc
